require(Rsubread)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Rsubread")
setwd("/_R_data/genomes/dm6/subreadr_index/subreadr_index/")
require(Rsubread)
setwd("/_R_data/projects/epigenetic_cancer/")
require(Rsubread)
setwd("/_R_data/projects/epigenetic_cancer/")
require(Rsubread)
require(data.table)
setwd("/_R_data/projects/epigenetic_cancer/")
require(Rsubread)
require(data.table)
setwd("/_R_data/genomes/dm6/subreadr_index/subreadr_index/")
setwd("/_R_data/genomes/dm6/subreadr_index/")
setwd("/_R_data/projects/epigenetic_cancer/")
setwd("/_R_data/projects/epigenetic_cancer/")
require(Rsubread)
require(data.table)
#----------------------------------------------------------#
# Metadata
#----------------------------------------------------------#
dat <- data.table(file= list.files("/home/vloubiere/projects/epigenetic_cancer/db/fastq", ".fq.gz", full.names = T, recursive = T))
dat[, cdition:= .(strsplit(sub("(_)(?=[^_]+$)", " ", .BY, perl=T), " ")[[1]][1]), gsub("rep|_1.fq.gz|_2.fq.gz|.fq.gz", "", basename(file))]
#----------------------------------------------------------#
# Metadata
#----------------------------------------------------------#
dat <- data.table(file= list.files("/db/fastq", ".fq.gz", full.names = T, recursive = T))
dat[, cdition:= .(strsplit(sub("(_)(?=[^_]+$)", " ", .BY, perl=T), " ")[[1]][1]), gsub("rep|_1.fq.gz|_2.fq.gz|.fq.gz", "", basename(file))]
#----------------------------------------------------------#
# Metadata
#----------------------------------------------------------#
dat <- data.table(file= list.files("/db/fastq", ".fq.gz", full.names = T, recursive = T))
dat
#----------------------------------------------------------#
# Metadata
#----------------------------------------------------------#
dat <- data.table(file= list.files("/db/fastq/", ".fq.gz", full.names = T, recursive = T))
dat
#----------------------------------------------------------#
# Metadata
#----------------------------------------------------------#
dat <- data.table(file= list.files("db/fastq/", ".fq.gz", full.names = T, recursive = T))
dat
#----------------------------------------------------------#
# Metadata
#----------------------------------------------------------#
dat <- data.table(file= list.files("db/fastq", ".fq.gz", full.names = T, recursive = T))
dat
dat[, cdition:= .(strsplit(sub("(_)(?=[^_]+$)", " ", .BY, perl=T), " ")[[1]][1]), gsub("rep|_1.fq.gz|_2.fq.gz|.fq.gz", "", basename(file))]
dat[, replicate:= .(paste0("rep", strsplit(sub("(_)(?=[^_]+$)", " ", .BY, perl=T), " ")[[1]][2])), gsub("rep|_1.fq.gz|_2.fq.gz|.fq.gz", "", basename(file))]
dat[, bam:= paste0("db/bam/", cdition, "_", replicate, ".bam"), .(cdition, replicate)]
dat
dat[, counts_file:= paste0("db/counts/", gsub(".bam$", "_counts.rds", basename(bam)))]
dat
dat[, group:= tstrsplit(file, "/", keep= 8)]
dat[, group:= tstrsplit(file, "/", keep= 5)]
dat
dat[, group:= tstrsplit(file, "/", keep= 4)]
dat
dat[, group:= tstrsplit(file, "/", keep= 3)]
dat
dat[, group:= tstrsplit(file, "/", keep= 3)]
#----------------------------------------------------------#
# Alignment
#----------------------------------------------------------#
dat[, {
if(!file.exists(bam)){
if(.N==2){
stats <- capture.output(subjunc(index= "subreadr_dm6_index", readfile1= file[1], readfile2= file[2],
maxMismatches = 6, nthreads = 10, unique = T, output_file= bam))
}else if(.N==1){
stats <- capture.output(subjunc(index= "subreadr_dm6_index", readfile1= file[1],
nthreads = 10, unique = T, output_file= bam))
}
writeLines(stats, con = gsub(".bam$", "_stats.txt", bam))
}
print(paste(bam, "DONE!"))
}, .(cdition, replicate, bam)]
#----------------------------------------------------------#
# Compute counts
#----------------------------------------------------------#
dat[, {
if(!file.exists(counts_file)){
if(.N==2){
counts <- featureCounts(bam, annot.ext= "../../genomes/dm6/dmel-all-r6.36.gtf", isGTFAnnotationFile = T, isPairedEnd = T)
}else if(.N==1){
counts <- featureCounts(bam, annot.ext= "../../genomes/dm6/dmel-all-r6.36.gtf", isGTFAnnotationFile = T, isPairedEnd = F)
}
saveRDS(counts, counts_file)
}
print(paste(counts_file, "DONE!"))
}, .(cdition, replicate, bam, counts_file)]
.SD <- dat[group==group[1]]
.SD
dat[, dds_file:= paste0("db/dds/", group, "_dds.rds")]
dat
sampleTable <- data.frame(unique(.SD[, .(cdition, replicate, counts_file)]), row.names = "counts_file")
sampleTable
.SD
sampleTable <- data.frame(unique(.SD[, .(cdition, replicate, counts_file)]), row.names = "counts_file")
sampleTable
sampleTable <- data.frame(unique(.SD[, .(cdition, replicate, counts_file)]), row.names = "counts_file")
sampleTable
.SD[, readRDS(dds_file), dds_file]
.SD.SD
.SD
.SD <- dat[group==group[1]]
.SD
.SD[, readRDS(dds_file), dds_file]
.SD[, readRDS(dds_file)$counts, dds_file]
.SD[, readRDS(counts_file)$counts, counts_file]
.SD[, data.table(readRDS(counts_file)$counts, keep.rownames = T), counts_file]
sampleTable <- data.frame(unique(.SD[, .(cdition, replicate, counts_file)]), row.names = "counts_file")
.SD[, {
.c <- data.table(readRDS(counts_file)$counts, keep.rownames = T)
colnames(.c)[2] <- "counts"
.c
}, counts_file]
DF <- .SD[, {
.c <- data.table(readRDS(counts_file)$counts, keep.rownames = T)
colnames(.c)[2] <- "counts"
.c
}, counts_file]
dcast(DF, rn~basename(counts_file), DF)
dcast(DF, rn~counts_file, DF)
dcast(DF, rn~counts_file)
dcast(DF, rn~basnemae(counts_file))
dcast(DF, rn~basename(counts_file))
sampleTable <- data.frame(unique(.SD[, .(cdition, replicate, counts_file)]), row.names = "counts_file")
sampleTable
sampleTable <- data.frame(unique(.SD[, .(cdition, replicate, counts_file= basename(counts_file))]), row.names = "counts_file")
DF <- .SD[, {
.c <- data.table(readRDS(counts_file)$counts, keep.rownames = T)
colnames(.c)[2] <- "counts"
.c
}, counts_file]
DF <- dcast(DF, rn~basename(counts_file))
DF
DF <- dcast(DF, rn~basename(counts_file), value.var = "counts")
sampleTable <- data.frame(unique(.SD[, .(cdition, replicate, counts_file= basename(counts_file))]), row.names = "counts_file")
DF <- .SD[, {
.c <- data.table(readRDS(counts_file)$counts, keep.rownames = T)
colnames(.c)[2] <- "counts"
.c
}, counts_file]
DF <- dcast(DF, rn~basename(counts_file), value.var = "counts")
DF
DF <- DF[rowSums(DF)>10, ]
dds <- DESeqDataSetFromMatrix(countData= DF, colData= sampleTable, design= ~replicate+cdition)
require(DESeq2)
dds <- DESeqDataSetFromMatrix(countData= DF, colData= sampleTable, design= ~replicate+cdition)
DF
DF <- .SD[, {
.c <- data.table(readRDS(counts_file)$counts, keep.rownames = T)
colnames(.c)[2] <- "counts"
.c
}, counts_file]
DF <- data.frame(dcast(DF, rn~basename(counts_file), value.var = "counts"), row.names = "rn")
DF <- DF[rowSums(DF)>10, ]
DF
heads(DF)
head(DF)
sampleTable <- data.frame(unique(.SD[, .(cdition, replicate, counts_file= basename(counts_file))]), row.names = "counts_file")
DF <- .SD[, {
.c <- data.table(readRDS(counts_file)$counts, keep.rownames = T)
colnames(.c)[2] <- "counts"
.c
}, counts_file]
DF <- data.frame(dcast(DF, rn~basename(counts_file), value.var = "counts"), row.names = "rn")
DF <- DF[rowSums(DF)>10, ]
dds <- DESeqDataSetFromMatrix(countData= DF, colData= sampleTable, design= ~replicate+cdition)
dds
dds <- DESeqDataSetFromMatrix(countData= DF, colData= sampleTable, design= ~replicate+cdition)
dds <- DESeq(dds)
dds
dat
sampleTablew
sampleTable
rownames(sampleTable)
# Differential expression
diff <- CJ(rownames(sampleTable), rownames(sampleTable))
diff
# Differential expression
diff <- CJ(rownames(sampleTable), rownames(sampleTable), unique = T)
diff
# Differential expression
diff <- CJ(sampleTable$cdition, sampleTable$cdition, unique = T)
diff
unique(diff)
diff <- diff[V1!=V2]
diff
i=1
diff[i, V1]
diff[i, V2]
results(dds, contrast= c("cdition", diff[i, V1], diff[i, V2]))
as.data.table(results(dds, contrast= c("cdition", diff[i, V1], diff[i, V2])))
as.data.table(results(dds, contrast= c("cdition", diff[i, V1], diff[i, V2])), keep.rownames= T)
data.table(results(dds, contrast= c("cdition", diff[i, V1], diff[i, V2])), keep.rownames= T)
as.data.frame(results(dds, contrast= c("cdition", diff[i, V1], diff[i, V2])))
test <- as.data.frame(results(dds, contrast= c("cdition", diff[i, V1], diff[i, V2])))
fwrite(test, "test.txt", col.names = T, row.names = T, sep ="\t", quote= F)
fread("test.txt")
as.data.table(results(dds, contrast= c("cdition", diff[i, V1], diff[i, V2])))
as.data.table(results(dds, contrast= c("cdition", diff[i, V1], diff[i, V2])), keep.rownames= T)
test <- as.data.frame(results(dds, contrast= c("cdition", diff[i, V1], diff[i, V2])))
test
paste0(diff[i, V1], diff[i, V2])
paste0(cdition, "_", diff[i, V1], "_vs_", diff[i, V2])
paste0(group, "_", diff[i, V1], "_vs_", diff[i, V2])
.SD$group[1]
paste0("db/FC_tables/", group, "_", diff[i, V1], "_vs_", diff[i, V2])
.SD$group[1]
paste0("db/FC_tables/", .SD$group[1], "_", diff[i, V1], "_vs_", diff[i, V2])
# Differential expression
diff <- CJ(sampleTable$cdition, sampleTable$cdition, unique = T)
diff <- diff[V1!=V2]
diff[, FC_file:= paste0("db/FC_tables/", group, "_", diff[i, V1], "_vs_", diff[i, V2], "_FC.txt")]
# Differential expression
diff <- CJ(sampleTable$cdition, sampleTable$cdition, unique = T)
diff <- diff[V1!=V2]
diff[, FC_file:= paste0("db/FC_tables/", group, "_", diff[i, V1], "_vs_", diff[i, V2], "_FC.txt")]
source('D:/_R_data/projects/epigenetic_cancer/git_epiCancer/A_RNASeq_alignment.R', echo=TRUE)
source('D:/_R_data/projects/epigenetic_cancer/git_epiCancer/A_RNASeq_alignment.R', echo=TRUE)
.SD <- dat[group==group[1] & dds_file==dds_file[1]]
.SD
.SD$dds_file
dds_file <- unique(.SD$dds_file)
group <- unique(.SD$group)
group]
group
file.exists(dds_file)
!file.exists(dds_file)
dds_file
if(!file.exists(dds_file)){
# DESEq2
sampleTable <- data.frame(unique(.SD[, .(cdition, replicate, counts_file= basename(counts_file))]), row.names = "counts_file")
DF <- .SD[, {
.c <- data.table(readRDS(counts_file)$counts, keep.rownames = T)
colnames(.c)[2] <- "counts"
.c
}, counts_file]
DF <- data.frame(dcast(DF, rn~basename(counts_file), value.var = "counts"), row.names = "rn")
DF <- DF[rowSums(DF)>10, ]
dds <- DESeqDataSetFromMatrix(countData= DF, colData= sampleTable, design= ~replicate+cdition)
dds <- DESeq(dds)
saveRDS(dds, dds_file)
}else{
dds <- readRDS(dds_file)
}
print(paste(dds, "DONE!s"))
print(paste(dds_file, "DONE!"))
# Differential expression
diff <- CJ(sampleTable$cdition, sampleTable$cdition, unique = T)
diff <- diff[V1!=V2]
diff[, FC_file:= paste0("db/FC_tables/", group, "_", diff[i, V1], "_vs_", diff[i, V2], "_FC.txt")]
diff
diff[, FC_file:= paste0("db/FC_tables/", group, "_", V1, "_vs_", V2, "_FC.txt"), .(V1, V2)]
diff
# Differential expression
diff <- CJ(sampleTable$cdition, sampleTable$cdition, unique = T)
diff <- diff[V1!=V2]
diff[, FC_file:= paste0("db/FC_tables/", group, "_", V1, "_vs_", V2, "_FC.txt"), .(V1, V2)]
diff
dat[, {
if(!file.exists(dds_file)){
# DESEq2
sampleTable <- data.frame(unique(.SD[, .(cdition, replicate, counts_file= basename(counts_file))]), row.names = "counts_file")
DF <- .SD[, {
.c <- data.table(readRDS(counts_file)$counts, keep.rownames = T)
colnames(.c)[2] <- "counts"
.c
}, counts_file]
DF <- data.frame(dcast(DF, rn~basename(counts_file), value.var = "counts"), row.names = "rn")
DF <- DF[rowSums(DF)>10, ]
dds <- DESeqDataSetFromMatrix(countData= DF, colData= sampleTable, design= ~replicate+cdition)
dds <- DESeq(dds)
saveRDS(dds, dds_file)
}else{
dds <- readRDS(dds_file)
}
print(paste(dds_file, "DONE!"))
# Differential expression
diff <- CJ(sampleTable$cdition, sampleTable$cdition, unique = T)
diff <- diff[V1!=V2]
diff[, FC_file:= paste0("db/FC_tables/", group, "_", V1, "_vs_", V2, "_FC.txt"), .(V1, V2)]
diff[, {
if(!file.exists(FC_file)){
.c <- as.data.frame(results(dds, contrast= c("cdition", V1, V2)))
fwrite(.c, FC_file, col.names = T, row.names = T, sep ="\t", quote= F)
}
print(paste(FC_file, "DONE!"))
}, .(FC_file, V1, V2)]
}, .(group, dds_file)]
fread("db/FC_tables/RNA_development_RNA_120hED_vs_RNA_72hED_FC.txt")
fread("db/FC_tables/RNA_phRNAi_SA2020_RNA_PHRNAI_ED_vs_RNA_WRNAI_ED_FC.txt")
